import streamlit as st
import pyttsx3
import docx
import webbrowser
import os
import pyautogui
import cv2
import pygame
import sys
import nltk
import spacy
import numpy as np
import requests
import speech_recognition as sr
import sounddevice as sd
import soundfile as sf
import seaborn as sns
import plotly.express as px
import pandas as pd
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup
from PyPDF2 import PdfReader
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.linear_model import LinearRegression
from textblob import TextBlob
from heapq import nlargest
from datetime import datetime

st.set_page_config(
    page_title="Asistent Vocal",
    page_icon="üëã",
)

# Func»õia pentru √ÆncƒÉrcarea datelor din fi»ôier
def load_data(uploaded_file):
    if uploaded_file is not None:
        try:
            data = pd.read_excel(uploaded_file, index_col="ds")
            return data
        except Exception as e:
            st.error(f"A apƒÉrut o eroare la √ÆncƒÉrcarea fi»ôierului: {str(e)}")
    else:
        return None

def show_analysis(data):
    if data is not None:
        st.subheader("Datele despre calitatea aerului")
        st.write(data)

        # EDA
        st.markdown("### üïµÔ∏è‚Äç‚ôÇÔ∏è Analiza datelor:", unsafe_allow_html=True)
        with st.expander("Afi»ôa»õi EDA"):
            if st.checkbox("Afi»ôa»õi primele 5 r√Ænduri"):
                st.write(data.head())
            if st.checkbox("Afi»ôa»õi ultimele 5 r√Ænduri"):
                st.write(data.tail())
            if st.checkbox("Afi»ôare formƒÉ"):
                st.write(f"Acest DataFrame are **{data.shape[0]} rinduri** »ôi **{data.shape[1]} coloane**.")
            if st.checkbox("Afi»ôare coloane"):
                st.write(pd.DataFrame(data.columns, columns=['Columns']).T)
            if st.checkbox("Afi»ôa»õi descrierea **(Caractersitici numerice)**"):
                st.write(data.describe())
            if st.checkbox("Afi»ôa»õi descrierea **(Caractersitici categorice)**"):
                if data.select_dtypes(include=object).columns.tolist():
                    st.write(data.describe(include=['object']))
                else:
                    st.info("Nu existƒÉ caracteristici categorice.")
            if st.checkbox("Afi»ôare corela»õie"):
                if data.corr().columns.tolist():
                    fig, ax = plt.subplots()
                    sns.heatmap(data.corr(), cmap='Blues', annot=True, ax=ax)
                    st.pyplot(fig)
                else:
                    st.info("Nu existƒÉ caracteristici de corela»õie.")
            if st.checkbox("Afi»ôare valori lipsƒÉ"):
                col1, col2 = st.columns([0.4, 1])
                with col1:
                    st.markdown("<h6 align='center'> Numar de valori nule", unsafe_allow_html=True)
                    st.write(data.isnull().sum().sort_values(ascending=False))
                with col2:
                    st.markdown("<h6 align='center'> Reprezentare graficƒÉ pentru valorile nule ", unsafe_allow_html=True)
                    null_values = data.isnull().sum()
                    null_values = null_values[null_values > 0]
                    if not null_values.empty:
                        null_values = null_values.sort_values(ascending=False).to_frame()
                        null_values.columns = ['Count']
                        null_values.index.names = ['Feature']
                        null_values['Feature'] = null_values.index
                        fig = px.bar(null_values, x='Feature', y='Count', color='Count')
                        st.plotly_chart(fig)
                    else:
                        st.info("Nu sunt valori lipsƒÉ.")

            if st.checkbox("»òtergerea coloanelor"):
                col_to_delete = st.multiselect("Selecta»õi coloanele de »ôters", data.columns)
                if st.button("»òterge"):
                    data.drop(columns=col_to_delete, inplace=True)
                    st.success(f"Coloana  **`{col_to_delete}`** a fost »ôtearsƒÉ cu succes")

            if st.button("Afi»ôare DataFrame"):
                st.write(data)

        # AnalizƒÉ de serie temporalƒÉ
        st.markdown("### üìà AnalizƒÉ de Serie TemporalƒÉ", unsafe_allow_html=True)
        if isinstance(data.index, pd.DatetimeIndex):
            time_series_var = st.selectbox("Selecta»õi Variabila:", data.columns)
            fig = px.line(data, x=data.index, y=time_series_var,
                          title=f"Evolu»õia lui {time_series_var} √Æn timp")
            st.plotly_chart(fig)
            st.subheader("Analiza SezonieritƒÉ»õii")
            seasonal_decomposition = seasonal_decompose(data[time_series_var], model='additive')
            fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(10, 8))
            seasonal_decomposition.observed.plot(ax=ax1)
            ax1.set_ylabel('Observat')
            seasonal_decomposition.trend.plot(ax=ax2)
            ax2.set_ylabel('Tendin»õƒÉ')
            seasonal_decomposition.seasonal.plot(ax=ax3)
            ax3.set_ylabel('Sezonier')
            seasonal_decomposition.resid.plot(ax=ax4)
            ax4.set_ylabel('Residual')
            plt.tight_layout()
            st.pyplot(fig)

            # AdƒÉugarea analizei tendin»õelor temporale
            st.subheader("Analiza Tendin»õelor Temporale")
            df = data[[time_series_var]].copy()
            df.dropna(inplace=True)
            df['Time'] = np.arange(len(df))
            X = df[['Time']]
            y = df[time_series_var]
            model = LinearRegression()
            model.fit(X, y)
            st.write(f"Tendin»õa liniarƒÉ a variabilei '{time_series_var}': {model.coef_[0]:.2f} unitƒÉ»õi pe unitate de timp")
            plt.figure(figsize=(10, 6))
            plt.plot(df.index, df[time_series_var], label='Actual Data')
            plt.plot(df.index, model.predict(X), label='Trend Line', linestyle='--', color='red')
            plt.title(f"Tendin»õa TemporalƒÉ a Variabilei '{time_series_var}'")
            plt.xlabel("Timp")
            plt.ylabel("Valoare")
            plt.legend()
            st.pyplot()

        else:
            st.warning("DataFrame-ul nu este indexat cu date timp. VƒÉ rugƒÉm sƒÉ specifica»õi coloana de date timp.")

def main():
    st.title("AnalizƒÉ Date")
    uploaded_file = st.file_uploader("√éncƒÉrca»õi fi»ôierul DataFrame (.csv, .xlsx, .txt)", type=["csv", "xlsx", "txt"])
    if uploaded_file:
        data = load_data(uploaded_file)
        show_analysis(data)
    else:
        st.info("VƒÉ rugƒÉm sƒÉ √ÆncƒÉrca»õi un fi»ôier pentru a √Æncepe analiza.")

########################################################################################
# Func»õia pentru a prelua comanda vocalƒÉ utiliz√¢nd SpeechRecognition
def start_listening():
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()

    while True:
        with microphone as source:
            recognizer.adjust_for_ambient_noise(source)
            with st.spinner("Ascult..."):
                audio = recognizer.listen(source)
        try:
            with st.spinner("Procesez..."):
                command = recognizer.recognize_google(audio, language="ro-RO").lower()
                st.success(f"Ai spus: {command}")  # Afiseaza comanda sub forma de cadru de succes
                return command
        except sr.UnknownValueError:
            st.error("Scuze, nu am √Æn»õeles. Te rog sƒÉ repe»õi comanda.")  # Afiseaza o eroare in cazul in care comanda nu este recunoscuta
        except sr.RequestError:
            st.error("Scuze, a apƒÉrut o eroare √Æn procesarea cererii tale. Te rog sƒÉ repe»õi comanda.")  # Afiseaza o eroare in cazul unei erori in procesare

AUDIO_DIRECTORY = "audio"

if not os.path.exists(AUDIO_DIRECTORY):
    os.makedirs(AUDIO_DIRECTORY)

def record_voice_note():
    st.write("Cum dori»õi sƒÉ numi»õi fi»ôierul?")
    speak("Cum dori»õi sƒÉ numi»õi fi»ôierul?")
    file_name = start_listening()
    speak(f"√éncepe»õi √Ænregistrarea pentru fi»ôierul {file_name}. Vorbi»õi acum...")
    st.write(f"√éncepe»õi √Ænregistrarea pentru fi»ôierul {file_name}. Vorbi»õi acum...")
    duration = 10
    recording = sd.rec(int(duration * 44100), samplerate=44100, channels=2, dtype='int16')
    sd.wait()
    file_path = os.path.join(AUDIO_DIRECTORY, f"{file_name}.wav")
    sf.write(file_path, recording, 44100)
    st.write("√énregistrare finalizatƒÉ.")
    speak("√énregistrare finalizatƒÉ.")

def play_voice_note():
    st.write("Despre ce fi»ôier dori»õi sƒÉ asculta»õi?")
    speak("Despre ce fi»ôier dori»õi sƒÉ asculta»õi?")
    file_name = start_listening()
    st.write(f"Redare fi»ôier {file_name}...")
    speak(f"Redare fi»ôier {file_name}...")
    file_path = os.path.join(AUDIO_DIRECTORY, f"{file_name}.wav")
    data, samplerate = sf.read(file_path)
    sd.play(data, samplerate)
    sd.wait()
    sentiment, summary, entities = analyze_and_summarize_audio(file_path)  # Modificarea aici
    display_results(sentiment, summary, entities)  # Modificarea aici

def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def transcribe_audio(file_path):
    recognizer = sr.Recognizer()
    audio_file = sr.AudioFile(file_path)
    with audio_file as source:
        audio_data = recognizer.record(source)
    try:
        transcript = recognizer.recognize_google(audio_data, language="ro-RO")
        return transcript
    except sr.UnknownValueError:
        print("Recunoa»ôterea vocalƒÉ nu a putut interpreta audio.")
        return ""
    except sr.RequestError:
        print("Eroare de conexiune la serviciul de recunoa»ôtere vocalƒÉ.")
        return ""

def analyze_sentiment(text):
    blob = TextBlob(text)
    polarity = blob.sentiment.polarity
    return polarity

def analyze_sentiment_category(polarity):
    if polarity > 0:
        return "Pozitiv"
    elif polarity < 0:
        return "Negativ"
    else:
        return "Neutru"

def summarize_text(text):
    sentences = nltk.sent_tokenize(text)
    word_frequencies = {}
    for sentence in sentences:
        for word in nltk.word_tokenize(sentence):
            if word not in word_frequencies:
                word_frequencies[word] = 1
            else:
                word_frequencies[word] += 1
    maximum_frequency = max(word_frequencies.values())
    for word in word_frequencies.keys():
        word_frequencies[word] = (word_frequencies[word] / maximum_frequency)
    sentence_scores = {}
    for sentence in sentences:
        for word in nltk.word_tokenize(sentence.lower()):
            if word in word_frequencies:
                if len(sentence.split(' ')) < 30:
                    if sentence not in sentence_scores:
                        sentence_scores[sentence] = word_frequencies[word]
                    else:
                        sentence_scores[sentence] += word_frequencies[word]
    summary_sentences = nlargest(7, sentence_scores, key=sentence_scores.get)
    summary = ' '.join(summary_sentences)
    return summary

# √éncƒÉrcarea modelului SpaCy pentru limba rom√¢nƒÉ
nlp_ro = spacy.load("ro_core_news_sm")

def detect_entities(text):
    doc = nlp_ro(text)
    entities = [(ent.text, ent.label_) for ent in doc.ents]
    return entities


def analyze_and_summarize_audio(file_path):
    transcript = transcribe_audio(file_path)
    entities = detect_entities(transcript)
    polarity = analyze_sentiment(transcript)
    sentiment_category = analyze_sentiment_category(polarity)
    summary = summarize_text(transcript)
    return sentiment_category, summary, entities

def display_results(sentiment, summary, entities):
    st.write("Sentiment:", sentiment)
    st.write("Rezumat:", summary)
    st.write("EntitƒÉ»õi detectate:")
    for entity in entities:
        st.write(entity)

def open_web_browser():
    speak("Deschid browser-ul web. Ce dore»ôti sƒÉ cau»õi sau sƒÉ accesezi?")
    while True:
        command = start_listening()
        if "cautƒÉ" in command:
            speak("Ce dore»ôti sƒÉ cau»õi pe internet?")
            query = start_listening()
            speak(f"Caut pe internet pentru: {query}")

            search_url = f'https://www.google.com/search?q={query}'
            response = requests.get(search_url)
            soup = BeautifulSoup(response.text, 'html.parser')

            search_results = soup.find_all('a')
            first_result = None
            for link in search_results:
                href = link.get('href')
                if href.startswith('/url?q='):
                    first_result = href[7:]
                    break

            if first_result:
                st.write("Accesam pagina.")
                speak("Accesam pagina.")
                webbrowser.open_new_tab(first_result)
            else:
                st.write("Nu am putut gƒÉsi niciun rezultat pentru cƒÉutarea ta.")
                speak("Nu am putut gƒÉsi niciun rezultat pentru cƒÉutarea ta.")
        elif "deschide" in command:
            st.write("Despre ce paginƒÉ web este vorba?")
            speak("Despre ce paginƒÉ web este vorba?")
            page_name = start_listening()
            speak(f"Accesez pagina {page_name}.")
            webbrowser.open_new_tab(f"http://{page_name}.com")

            search_results = soup.find_all('a')
            first_result = None
            for link in search_results:
                href = link.get('href')
                if href.startswith('/url?q='):
                    first_result = href[7:]
                    break

            if first_result:
                st.write("Acces√¢nd pagina.")
                speak("Acces√¢nd pagina.")
                webbrowser.open_new_tab(first_result)
            else:
                st.write("Nu am putut gƒÉsi niciun rezultat pentru cƒÉutarea ta.")
                speak("Nu am putut gƒÉsi niciun rezultat pentru cƒÉutarea ta.")
        elif "ie»ôire" in command:
            st.write("√énchid browser-ul web.")
            speak("√énchid browser-ul web.")
            break

        else:
            speak("ComandƒÉ invalidƒÉ. Te rog sƒÉ spui 'cautƒÉ', 'deschide' sau 'ie»ôire'.")


net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
classes = []
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]
layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]

detected_objects_prev = set()

def start_camera_with_voice_command():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        st.write("Zice»õi ‚Äûstart‚Äù pentru a porni camera sau ‚Äûstop‚Äù pentru a opri camera...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)

        try:
            text = r.recognize_google(audio, language="ro-RO")
            if "start" in text.lower():
                start_camera()
            elif "stop" in text.lower():
                st.write("Camera opritƒÉ.")
            else:
                st.write("Comanda vocalƒÉ nu a fost recunoscutƒÉ sau nu a fost pornitƒÉ/opritƒÉ camera.")
        except sr.UnknownValueError:
            st.write("Nu am putut recunoa»ôte comanda vocalƒÉ.")
        except sr.RequestError:
            st.write("Nu am putut accesa serviciul de recunoa»ôtere vocalƒÉ. Verifica»õi conexiunea la internet.")

def start_camera():
    global detected_objects_prev
    camera_capture = cv2.VideoCapture(0)
    display_interval = 100
    frame_count = 0
    while True:
        is_true, frame = camera_capture.read()
        height, width, channels = frame.shape
        frame_count += 1
        if frame_count % display_interval == 0:
        # DetecteazƒÉ obiectele folosind YOLO
            blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
            net.setInput(blob)
            outs = net.forward(output_layers)
            detected_objects_curr = set()
            for out in outs:
                for detection in out:
                    scores = detection[5:]
                    class_id = np.argmax(scores)
                    confidence = scores[class_id]
                    if confidence > 0.5:
                        detected_object = classes[class_id]
                        detected_objects_curr.add(detected_object)
                        center_x = int(detection[0] * width)
                        center_y = int(detection[1] * height)
                        w = int(detection[2] * width)
                        h = int(detection[3] * height)
                        x = int(center_x - w / 2)
                        y = int(center_y - h / 2)
                        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                        cv2.putText(frame, detected_object, (x, y + 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            new_objects = detected_objects_curr - detected_objects_prev
            st.image(frame, channels="BGR")
            st.write(list(new_objects))
            detected_objects_prev = detected_objects_curr
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    camera_capture.release()
    cv2.destroyAllWindows()

def take_screenshot():
    st.write("Fac un screenshot.")
    speak("Fac un screenshot.")
    screenshot = pyautogui.screenshot()
    st.image(screenshot, caption='Screenshot', use_column_width=True)

def take_picture():
    st.write("Fac o fotografie.")
    speak("Fac o fotografie.")
    camera = cv2.VideoCapture(0)
    return_value, image = camera.read()
    cv2.imwrite('photo.png', image)
    camera.release()
    st.image('photo.png', caption='Photography', use_column_width=True)

def open_presentation():
    st.write("Deschid prezentarea.")
    speak("Deschid prezentarea.")
    presentation_path = "prezentare.pptx"
    os.startfile(presentation_path)

def read_word_file(filename):
    doc_exists = os.path.exists(filename + '.docx')
    if not doc_exists:
        doc = docx.Document()
        doc.add_paragraph("Acesta este un fi»ôier Word creat prin comandƒÉ vocalƒÉ.")
        doc.save(filename + '.docx')
        speak(f"Fi»ôierul Word '{filename}.docx' a fost creat cu succes.")

    doc = docx.Document(filename + '.docx')
    speak("Ce dore»ôti sƒÉ faci cu fi»ôierul Word?")
    action = start_listening()

    if action == "adaugare" or action == "adƒÉugare":
        speak("Spune»õi textul pe care dori»õi sƒÉ-l adƒÉuga»õi.")
        text_to_add = start_listening()
        doc.add_paragraph(text_to_add)
        doc.save(filename + '.docx')
        speak("Textul a fost adƒÉugat cu succes √Æn fi»ôierul Word.")

    elif action == "»ôtergere":
        speak("Spune»õi textul pe care dori»õi sƒÉ-l »ôterge»õi.")
        text_to_delete = start_listening()
        paragraphs_to_delete = [p for p in doc.paragraphs if text_to_delete in p.text]
        for p in paragraphs_to_delete:
            p.clear()
        doc.save(filename + '.docx')
        speak("Textul a fost »ôters cu succes din fi»ôierul Word.")

    elif action == "citire":
        speak("Cite»ôte fi»ôierul Word.")
        for paragraph in doc.paragraphs:
            speak(paragraph.text)

def read_pdf_file(filename):
    speak("Ce dore»ôti sƒÉ faci cu fi»ôierul PDF?")
    action = st.radio("Alege ac»õiunea:", ("Citire", "AdƒÉugare", "»òtergere"))

    if action == "AdƒÉugare":
        text_to_add = st.text_input("Introdu textul pe care dore»ôti sƒÉ-l adaugi:")
        if st.button("AdaugƒÉ text"):
            with open(filename + '.pdf', 'rb') as file:
                pdf_reader = PdfReader(file)
                pdf_writer = PdfWriter()
                for page_number, page in enumerate(pdf_reader.pages):
                    page.text_objects.insert(0, create_text_object(text_to_add))
                    pdf_writer.add_page(page)
                with open('new_' + filename + '.pdf', 'wb') as new_file:
                    pdf_writer.write(new_file)
            speak("Textul a fost adƒÉugat cu succes √Æn fi»ôierul PDF.")

    elif action == "»òtergere":
        text_to_delete = st.text_input("Introdu textul pe care dore»ôti sƒÉ-l »ôtergi:")
        if st.button("»òterge text"):
            with open(filename + '.pdf', 'rb') as file:
                pdf_reader = PdfReader(file)
                pdf_writer = PdfWriter()
                for page_number, page in enumerate(pdf_reader.pages):
                    page.text_objects = [to for to in page.text_objects if text_to_delete not in to.get_text()]
                    pdf_writer.add_page(page)
                with open('new_' + filename + '.pdf', 'wb') as new_file:
                    pdf_writer.write(new_file)
            speak("Textul a fost »ôters cu succes din fi»ôierul PDF.")

    elif action == "Citire":
        speak("Cite»ôte fi»ôierul PDF.")
        with open(filename + '.pdf', 'rb') as file:
            pdf_reader = PdfReader(file)
            for page_number, page in enumerate(pdf_reader.pages):
                st.write(page.extract_text())

def create_text_object(text):
    text_object = TextObject()
    text_object.set_text(text)
    return text_object

def get_weather(city):
    api_key = "Your API key "  # √énlocui»õi cu cheia dvs. API OpenWeatherMap
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    data = response.json()
    temperature = data['main']['temp']
    humidity = data['main']['humidity']
    precipitation = data['weather'][0]['main']
    return temperature, humidity, precipitation

def read_text(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def main_control_vocal():
    st.title("Control vocal")
    st.sidebar.title("Meniu cu control vocal")
    speak("Spune '√éncepe' pentru a √Æncepe controlul vocal.")
    menu_options = [
        "Pornire vocalƒÉ",
        "Inregistrare vocalƒÉ(inregistrare)",
        "Redare vocalƒÉ(redare)",
        "Deschide browser-ul web(browser)",
        "Deschide o prezentare(prezentare)",
        "DetecteazƒÉ obiecte(camera)",
        "FƒÉ o fotografie(poza)",
        "FƒÉ un screenshot(screenshot)",
        "Cite»ôte un fi»ôier Word(word)",
        "Cite»ôte un fi»ôier PDF(pdf)",
        "Afi»ôeazƒÉ temperatura(temperatura)",
        "Ie»ôire(iesire)"
    ]
    selected_option = st.sidebar.radio("Alege o op»õiune:", menu_options)

    camera_started = False

    if selected_option == "Pornire vocalƒÉ":
        st.write("Spune 'Pornire' pentru a √Æncepe controlul vocal.")
        speak("Spune 'Pornire' pentru a √Æncepe controlul vocal.")
        command = start_listening()
        if command == "pornire":
            st.write("Controlul vocal a fost pornit. Spune o comandƒÉ din meniu.")

            while True:
                command = start_listening()
                if command == "joc":
                    start_game()
                elif command == "√Ænregistrare":
                    record_voice_note()
                elif command == "redare":
                    play_voice_note()
                elif command == "browser":
                    open_web_browser()
                elif command == "prezentare":
                    open_presentation()
                elif command == "camerƒÉ" or command =="camera":
                    if not camera_started:
                        start_camera()
                        camera_started = True
                elif command == "oprire":
                    if camera_started:
                        st.write("Camera opritƒÉ.")
                        break
                elif command == "pozƒÉ":
                    take_picture()
                elif command == "screenshot":
                    take_screenshot()
                elif command == "document pdf" or command == "pdf":
                    speak("Spune numele fi»ôierului PDF pe care dore»ôti sƒÉ-l deschizi.")
                    filename = start_listening()
                    if filename:
                        read_pdf_file(filename)
                elif command == "document word" or command == "word":
                    speak("Spune numele fi»ôierului word pe care dore»ôti sƒÉ-l deschizi.")
                    filename = start_listening()
                    if filename:
                        read_word_file(filename)
                elif command == "temperatura" or command == "temperaturƒÉ":
                    speak("Despre ce ora»ô dore»ôti sƒÉ vezi temperatura?")
                    st.write("Despre ce ora»ô dore»ôti sƒÉ vezi temperatura?")
                    city = start_listening()
                    try:
                        temperature, humidity, precipitation = get_weather(city)
                        speak(f'√én {city}:\nTemperatura este de aproximativ {temperature} grade Celsius.')
                        st.write(f'√én {city}:\nTemperatura este de aproximativ {temperature} grade Celsius.')
                        speak(f'Umiditatea este de {humidity} %.')
                        st.write(f'Umiditatea este de {humidity} %.')
                        speak(f'Condi»õia meteorologicƒÉ este {precipitation}.')
                        st.write(f'Condi»õia meteorologicƒÉ este {precipitation}.')
                    except Exception as e:
                        speak(
                            "Nu am putut ob»õine informa»õiile meteo. Verifica»õi conexiunea la internet sau √Æncerca»õi mai t√¢rziu.")
                elif command == "ie»ôire":
                    st.write("La revedere")
                    speak("La revedere")
                    st.stop()
                    break

    elif selected_option == "Inregistrare voce":
        record_voice_note()
    elif selected_option == "Redare voce":
        play_voice_note()
    elif selected_option == "Deschide browser-ul web":
        open_web_browser()
    elif selected_option == "Deschide o prezentare":
        open_presentation()
    elif selected_option == "DetecteazƒÉ obiecte":
        start_camera()
    elif selected_option == "FƒÉ o fotografie":
        take_picture()
    elif selected_option == "FƒÉ un screenshot":
        take_screenshot()
    elif selected_option == "Cite»ôte un fi»ôier Word":
        filename = st.sidebar.text_input("Introdu numele fi»ôierului Word:")
        read_word_file(filename)
    elif selected_option == "Cite»ôte un fi»ôier PDF":
        filename = st.sidebar.text_input("Introdu numele fi»ôierului PDF:")
        read_pdf_file(filename)
    elif selected_option == "Citire text":
        text_to_read = st.text_input("Introduce»õi textul de citit:")
        if st.button("Citire text"):
            read_text(text_to_read)
    elif selected_option == "Afi»ôeazƒÉ temperatura":
        speak("Despre ce ora»ô dore»ôti sƒÉ vezi temperatura?")
        city = start_listening()
        try:
            temperature, humidity, precipitation = get_weather(city)
            speak(f'√én {city}:\nTemperatura este de aproximativ {temperature} grade Celsius.')
            st.write(f'√én {city}:\nTemperatura este de aproximativ {temperature} grade Celsius.')
            speak(f'Umiditatea este de {humidity} %.')
            st.write(f'Umiditatea este de {humidity} %.')
            speak(f'Condi»õia meteorologicƒÉ este {precipitation}.')
            st.write(f'Condi»õia meteorologicƒÉ este {precipitation}.')
        except Exception as e:speak("Nu am putut ob»õine informa»õiile meteo. Verifica»õi conexiunea la internet sau √Æncerca»õi mai t√¢rziu.")
    elif selected_option == "Ie»ôire":
        st.stop()
        speak("La revedere")

def main_incarcare_date():
    st.title("√éncƒÉrcare Date")
    uploaded_file = st.file_uploader("√éncƒÉrca»õi fi»ôierul DataFrame (.csv, .xlsx, .txt)", type=["csv", "xlsx", "txt"])
    if uploaded_file:
        data = load_data(uploaded_file)
        show_analysis(data)

def help_section():
    st.subheader("Ajutor - Comenzi Vocale")
    commands = {
        "Inregistrare voce": "Comanda 'inregistrare' va inregistra vocea care o veti rosti. Va va intreba cum doriti sa denumiti fisierul.",
        "Redare voce": "Comanda 'redare' va reda vocea/fisierul din folderul audio pe care l-ati creat, de asemenea va arata rezumatul, sentimentul si entitatea din inregistrea facuta.",
        "Deschide browser-ul web": "Comanda 'web' va deschide un nou tab √Æn browser-ul web."
                                   "Comanda 'cauta' va deschide o pagina care doriti a cauta pe internet."
                                   "Comanda 'deschide' va deschide o pagina noua .com"
                                    "Comanda 'iesire' va inchide browserul web",
        "Deschide o prezentare": "Comanda 'prezentare' va deschide o prezentare PowerPoint.",
        "FƒÉ o fotografie": "Comanda 'pozƒÉ' va activa camera »ôi va face o fotografie.",
        "FƒÉ un screenshot": "Comanda 'screenshot' va realiza un screenshot al ecranului.",
        "Cite»ôte un fi»ôier Word": "Comanda 'Word' va deschide un document word iar cu comenzile.... "
                                  "'adauga' va adauga text in documentul word, "
                                  "'stergere' va sterge textul din documentul word, "
                                  "'citire' va citi textul din documentul word.",
        "Cite»ôte un fi»ôier PDF": "Comanda 'PDF' va citi con»õinutul unui fi»ôier PDF.",
        "Afi»ôeazƒÉ temperatura": "Comanda 'Temperatura' va afi»ôa temperatura »ôi condi»õiile meteorologice curente pentru un anumit ora»ô.",
        "Ie»ôire": "Comanda 'Ie»ôire' va √Ænchide aplica»õia."
    }

    for command, description in commands.items():
        st.write(f"- **{command}:** {description}")

def display_current_datetime():
    current_datetime = datetime.now()
    current_time = current_datetime.strftime("%H:%M:%S")
    current_date = current_datetime.strftime("%d-%m-%Y")
    st.sidebar.write(f"Data/Ora: {current_date} {current_time}")

#################################################################
# Func»õia principalƒÉ
def main():
    display_current_datetime()
    st.sidebar.title("Meniu Principal")
    page_options = ["Control Vocal", "√éncƒÉrcare Date", "Joc Pong Game"]
    selected_page = st.sidebar.radio("SelecteazƒÉ o paginƒÉ:", page_options)
    website_heading = "Assistent vocal pentru persoane cu dizabilitati"
    st.markdown(f"<h1 style='text-align: center; color: blue;'>{website_heading}</h1>", unsafe_allow_html=True)
    help_section()

    if selected_page == "Control Vocal":
        main_control_vocal()
    elif selected_page == "√éncƒÉrcare Date":
        main_incarcare_date()
    elif selected_page == "Joc Pong Game":
        start_game()

#################################################################
def start_game():
    st.write("Pornire joc...")
    speak("Pornire joc...")
    pygame.init()

    WIDTH, HEIGHT = 600, 400
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    BALL_SPEED = 5

    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Pong Game")

    ball_x, ball_y = WIDTH // 2, HEIGHT // 2
    ball_speed_x, ball_speed_y = BALL_SPEED, BALL_SPEED

    paddle_width, paddle_height = 15, 60
    left_paddle_x, right_paddle_x = 10, WIDTH - 25
    left_paddle_y, right_paddle_y = HEIGHT // 2 - paddle_height // 2, HEIGHT // 2 - paddle_height // 2
    paddle_speed = 7
    score_left, score_right = 0, 0

    font = pygame.font.Font(None, 36)

    def reset_ball():
        return WIDTH // 2, HEIGHT // 2, BALL_SPEED, BALL_SPEED

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        keys = pygame.key.get_pressed()
        if keys[pygame.K_w] and left_paddle_y > 0:
            left_paddle_y -= paddle_speed
        if keys[pygame.K_s] and left_paddle_y < HEIGHT - paddle_height:
            left_paddle_y += paddle_speed
        if keys[pygame.K_UP] and right_paddle_y > 0:
            right_paddle_y -= paddle_speed
        if keys[pygame.K_DOWN] and right_paddle_y < HEIGHT - paddle_height:
            right_paddle_y += paddle_speed

        ball_x += ball_speed_x
        ball_y += ball_speed_y

        if (
            left_paddle_x < ball_x < left_paddle_x + paddle_width
            and left_paddle_y < ball_y < left_paddle_y + paddle_height
        ) or (
            right_paddle_x < ball_x < right_paddle_x + paddle_width
            and right_paddle_y < ball_y < right_paddle_y + paddle_height
        ):
            ball_speed_x = -ball_speed_x

        if ball_y <= 0 or ball_y >= HEIGHT:
            ball_speed_y = -ball_speed_y

        if ball_x <= 0:
            score_right += 1
            ball_x, ball_y, ball_speed_x, ball_speed_y = reset_ball()

        if ball_x >= WIDTH:
            score_left += 1
            ball_x, ball_y, ball_speed_x, ball_speed_y = reset_ball()

        screen.fill(BLACK)
        pygame.draw.rect(screen, WHITE, (left_paddle_x, left_paddle_y, paddle_width, paddle_height))
        pygame.draw.rect(screen, WHITE, (right_paddle_x, right_paddle_y, paddle_width, paddle_height))
        pygame.draw.ellipse(screen, WHITE, (ball_x - 10, ball_y - 10, 20, 20))
        score_display = font.render(f"{score_left} - {score_right}", True, WHITE)
        screen.blit(score_display, (WIDTH // 2 - 40, 10))

        pygame.display.flip()
        pygame.time.Clock().tick(60)

if __name__ == "__main__":
    main()
